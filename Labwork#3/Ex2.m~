clear all
close all
clc

disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
disp('%%                                                                  %%')
disp('%%          [Robótica - 07/11/2017 ~ 26/11/2017] LABWORK#3          %%')
disp('%%                                                                  %%')
disp('%%                   Frederico Vaz, nº 2011283029                   %%')
disp('%%                   Paulo Almeida, nº 2010128473                   %%')
disp('%%                                                                  %%')
disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
disp(' ')
disp('*************************** Exercício 2 ******************************')
%% Robot 5-DOF (3 de rotação e 2 prismáticos): RRPRP

syms theta1 theta2 d3 theta4 d5

% Comprimentos dos elos:
a    = 50;
bmin = 40;
c    = 30;
tzh = a + bmin + c;

% Junta Rotacional ou Prismatica:
R = 1; P = 0;
%_________________________________________________________________________________
%          thetai  |  di  |  ai |  alfai | offseti | jointtypei
%_________________________________________________________________________________
PJ_DH = [  theta1      a      0    -pi/2        0           R;   % Junta Rotacional
%_________________________________________________________________________________
           theta2      0      0     pi/2        0           R;   % Junta Rotacional
%_________________________________________________________________________________
                0     d3      0    -pi/2       20           P;   % Junta Prismática
%_________________________________________________________________________________
           theta4      0      0     pi/2        0           R;   % Junta Rotacional
%_________________________________________________________________________________
                0     d5      0        0        0           P ]; % Junta Prismática
%_________________________________________________________________________________

% A cinematica directa da base   até ao Gripper: 
[ oTg, Ti ] = direct_kinematics(PJ_DH);       

oTg = simplify(oTg);
Ti  = simplify(Ti) ;


%% INICIALIZAÇÃO DO ROBOT: CRIAR LINKS


for i = 1 : size(PJ_DH,1)
    
    if PJ_DH(i,6) == R              % Juntas Rotacionais
        
        L(i) = Link('d',eval(PJ_DH(i,2)),...
                    'a', eval(PJ_DH(i,3)),...
                    'alpha', eval(PJ_DH(i,4)),...
                    'offset', eval(PJ_DH(i,5)));
    end
    
    if PJ_DH(i,6) == P              % Junta Prismática
        
        L(i) = Link('theta',eval(PJ_DH(i,1)),...
                    'a', eval(PJ_DH(i,3)),...
                    'alpha', eval(PJ_DH(i,4)),...
                    'offset', eval(PJ_DH(i,5)),...
                    'qlim', [25 50]);
        
    end

end

robot = SerialLink(L, 'name', 'Robot Planar RRR');


%% VARIÁVEIS GLOBAIS 

% Inicialização do vector de juntas na nossa posição "home" // ao Eixo do X
%q = [ 0 pi/2 40 pi/2 30];

alfa = acos(15/bmin);
th2 = pi - alfa;
th4 = alfa;

q = [ 0 th2 20 th4 30 ]; % Nota: d3 <=> 20 de offset + 20 = 40

% Juntas em symbolic p/ resolver o Jacobiano
q_aux = [ theta1 theta2 d3 theta4 d5 ]; %

% POSIÇÃO HOME:

% Pela cinemática directa
bTf = eval(subs(oTg, q_aux, q));


% Pela cinemática inversa

% bTf = [1  0  0  0  ;
%        0  1  0  65  ; % olhomento x= 0 e y = 65
%        0  0  1  tzh;
%        0  0  0  1  ];

% Cinemática Inversa:
%[ q_home ] = inverse_kinematics_ex2(bTf);  

       
% Construir jacobiana 2 partir dos parâmetros calculados na cinemática inversa
Jac = Jacobian(oTg, Ti, q_aux, PJ_DH(:,6));

% retirar as componentes de velocidade nula [ vx vy vz ]
Jac_ = Jac(1:3,1:3);
                

%% MENU ("main")

% Variaveis MENU
select = 0;
select2 = 0;
STOP = 7;
STOP2 = 3;

while(select ~= STOP)
    
    select = menu('Seleccione a acção a realizar:', 'Cinemática Directa',...
                                                    'Plot do Robo',...
                                                    'alinea a)',...
                                                    'alinea b)',...
                                                    'alinea c)',...
                                                    'alinea d)',...
                                                    'Quit');  
                                                
    % Matriz dos parametros de Denavith-Hartenberg: PJ_DH
    if select == 1  
        disp('______________________________________________________________________')
        disp(' ')
        disp('PJ_DH: Matriz dos parametros de Denavith-Hartenberg:')
        disp('______________________________________________________________________')
        disp(' ')
        PJ_DH_ = SerialLink(L, 'name', 'Robot Planar RRPRP')
        disp(' ')
        disp('______________________________________________________________________')
        disp(' ')
        disp('oTg: Cinematica Directa c/ variaveis simbolicas:')
        disp('______________________________________________________________________')
        disp(' ')
        disp(oTg)
        disp(' ')
        disp('______________________________________________________________________')
    disp('#######################################################################')   
    end  
    
    %% PLOT DO ROBOT:
    
    if select == 2
        
        figure('units','normalized','outerposition',[0 0 1 1]);
         % Prespectiva de lado do Robot  
        subplot(1,2,1);
        robot.plot(q, 'workspace', [-10 60 -10 60 -10 60], 'reach', ... 
                       1, 'scale', 10, 'zoom', 0.25); % 'view', 'top', 'trail', 'b.');
                      
        % Prespectiva de topo do Robot -------------------------------------
        
         subplot(1,2,2);
         robot.plot(q, 'workspace', [-10 60 -10 60 -10 60],...
                       'reach', 1,...
                       'scale', 10,...
                       'zoom', 0.25,...
                       'view',...
                       'top'); % 'trail', 'b.');
                   
    disp('#######################################################################') 
    end   

    %% a) Calcule a matriz Jacobiana do manipulador ºJ
    if select == 3
        disp(' ')
        disp('______________________________________________________________________')
        disp(' ')
        disp('Matriz Jacobiana:')
        disp(' ')
        disp('______________________________________________________________________')
        disp(' ')
        disp(Jac)
                
        disp(' ')
        disp('#######################################################################')
    end % fim da alínea a)
    
    %% b) Admitindo que se controla unicamente as juntas de rotação theta1, theta2 e a junta prismática b, 
    %     calcule as velocidades de	 funcionamento que permitem seguir a peça
    
    if select == 4
        
        % qVelocidades = Inversa da Jacobiana x Velocidades em XYZ / [ vx vy vz]
        % c/ Vy = 20cm/s e Vx e Vz = 0 que permite seguir a peça ao longo do Eixo Y
        % pois só temos temos velocidade em Y. Resultado -> [ W_theta1 W_theta2 V_d3 ] 
        qVelocidades = inv(Jac_)*[ 0 Vy 0]';  
        
        disp(' ')
        disp('Expressões para velocidade das juntas c/ Vy = 20cm/s:')
        disp(' ')
        disp('______________________________________________________________________')
        disp(' ')
        disp(qVelocidades)
        disp(' ')
        disp('______________________________________________________________________')
        
    disp('#######################################################################')    
    end % fim da alinea b)
    
    %% c) Calcule as expressões	analíticas das variáveis das juntas	theta1,theta2 e	b em função	dos	
    %     parâmetros da trajetória pretendida para a garra (x=bmin, y variável).
    
    if select == 5
                
        % Cinemática Inversa?
        
        

    disp('#######################################################################')   
    end % fim da alinea c)
    
    %% d) Movimento do manipulador com malha de controlo
    
    if select == 6
        
       % sub-menu
       while(select2 ~= STOP2)
                     
           select2 = menu('Seleccione a abordagem desejada: ', 'Integrador',...
                                                               'Malha-Fechada',...
                                                               'Back');                                              
           %#######################################################################        
           
           % Velocidades impostas:
           Vx = 0;
           Vy = 20; % que permite seguir a peça // ao Eixo Y
           Vz = 0;
           
           % Posição Final do Gripper
           Xf = bTf(1,4); Yf = 50;
                              
           % Período de Amostragem dos Controladores 
           h = 0.1;
           
           % Inicializa as Juntas segundo a Matriz Home/Posição Inicial
           %[ q_controlo ] = inverse_kinematics_ex2(bTf);
           
           q_controlo = q(1:3); 
           
           % 1. Abordagem Integradora
           if select2 == 1
               
               k = 1;
               
               while(bTf(2,4,k) < Yf) % && bTf(1,4) < Xf)
                   
                   % [ Vx vy Vz ] -> Idealmente Vx e Vz = 0 mas! vamos ver
                   % que o ponto x irá ter um erro em relação ao inicial
                   % sendo que com o controlo em malha fechada pretende-se
                   % corrigir tal erro!
                   V(k,:) = [ Vx Vy Vz ];
                   
                   % Inversa do Jacobiano x Velocidades em XYZ
                   qVelocidades_ = inv(Jac_)*V(k,:)';
                   % Calculo da Inversa do Jacobiano
                   qVelocidades(:,k) = eval(subs(qVelocidades_, q_aux,...
                                     [ q_controlo(k,1:3) q(4:5) ] ));
                   
                   % Proximas Juntas segundo a Lei de Controlo: Abordagem Integradora
                   q_controlo(k+1,:) = q_controlo(k,:) + h*qVelocidades(:,k)';
                   
                   % tx e ty através da Matriz da Cinemática Directa
                   bTf(:,:,k+1) = eval(subs(oTg, q_aux,...
                                [ q_controlo(k,1:3) q(4:5) ] ));
                   
                   clc
                   disp(' ')
                   disp(['Loading... ', num2str((k/51)*100), '%'])
                   
                   q_out(k,:) = [q_controlo(k,1) q_controlo(k,2) q_controlo(k,3) q(4:5)];
                   
                   k = k + 1;
               end
               
               % PLOT do Robô com velocidades
               plot_robot2(robot, k, V, qVelocidades, q_out);
               
           end
           %#######################################################################           
           % 2. Abordagem em malha-fechada
           if select2 == 2
               
               % Controlo Propocional
               kp = 1.0;
               % Controlo Derivativo
               kd = 0.65;
               
               % Posição Inicial!
               tx_desej = bTf(1,4);
               ty_desej = bTf(2,4);
               
               % Deslocamento = Velocidade*Período IDEAL!
               dx = Vx*h; % IDEALMENTE é 0! Queremos manter a pos X
               dy = Vy*h;
               dz = Vz*h; % IDEALMENTE é 0! Queremos manter a pos Z
               
               k = 1;
               
               while(bTf(2,4,k) < Yf) % && bTf(1,4) < Xf)
                   
                   % [ Vx vy Vz ]
                   V(k,:) = [ Vx Vy Vz ];
                   
                   % Inversa do Jacobiano x Velocidades em XYZ
                   qVelocidades_ = inv(Jac_)*V(k,:)';
                   % Calculo da Inversa do Jacobiano
                   qVelocidades(:,k) = eval(subs(qVelocidades_, q_aux,...
                                     [ q_controlo(k,1:3) q(4:5) ] ));
                   
                   % Proximas Juntas: Controlo Malha fechada
                   q_controlo(k+1,:) = q_controlo(k,:) + kp*h*qVelocidades(:,k)';
                   
                   % tx e ty através da Matriz da Cinemática Directa
                   bTf(:,:,k+1) = eval(subs(oTg, q_aux,...
                                [ q_controlo(k,1:3) q(4:5) ] ));
                   
                   % ------------------------------------------------------
                   % Guardamos a Posição actual
                   tx_actual = bTf(1,4,k);
                   ty_actual = bTf(2,4,k);
                   tz_actual = bTf(3,4,k);
                  
                   % Posição desejada = Posição + Deslocamento IDEAL!
                   tx_desej = tx_desej + dx; % IDEALMENTE deve-se manter nos 57
                   ty_desej = ty_desej + dy;
                   tz_desej = tz_desej + dz; % IDEALMENTE deve-se manter nos 5
                   
                   dx_erro = tx_desej - tx_actual
                   dy_erro = ty_desej - ty_actual
                   dz_erro = tz_desej - tz_actual
                   
                   Vx = dx_erro/h; % kp*dx_erro + kd*dx_erro/h; 
                   Vy = dy_erro/h; %kp*dy_erro + kd*dy_erro/h;
                   Vz = dzz_erro/h; %kp*dy_erro + kd*dy_erro/h;
                   
                   % NOTA: Como estamos a dividir o deslocamento a efectuar
                   % pelo Período temos de imeadiato a velocidade a impor
                   % no caso c/ parte derivativa do controlo, esta
                   % corresponde acaba por corresponder a velocidade a impor
                   % ------------------------------------------------------        
%                    clc
%                    disp(' ')
%                    disp(['Loading... ', num2str((k/51)*100), '%'])
                  
                   
                   q_out(k,:) = [q_controlo(k,1) q_controlo(k,2) q_controlo(k,3) q(4:5)];
                   
                   k = k + 1;
               end
               
               % PLOT do Robô com velocidades
               plot_robot2(robot, k, V, qVelocidades, q_out);
 
           end
           %#######################################################################
           
       end % fim do sub-menu
    end % fim da alínea d)
    disp('#######################################################################')   
end % fim do menu/ fim do exercicio
